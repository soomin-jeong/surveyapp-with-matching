import unittestfrom backend.src.strategies.matchmaking.implemented_strategies.random_matchmaking_strategy import Strategy as s_randomfrom backend.src.strategies.matchmaking.implemented_strategies.least_difference_matching_strategy import Strategy as s_least_difffrom backend.src.strategies.preprocessing.hierarchical_clustering import UserCluster, HierarchicalClusterclass RandomMatchingStrategyTest(unittest.TestCase):    def test_random_strategy_returns_existing_user(self):        dummy_cluster = UserCluster(is_root=True)        dummy_cluster.user_ids = [1, 3, 5]        dummy_cluster.user_cnt = 3        random_matching_strategy = s_random(dummy_cluster, 1)        matched_user_id = random_matching_strategy.get_matched_offline_user_id()        # though it's random, this test expects the same result because its seed is given        self.assertEqual(matched_user_id, 5, "The ID of the matched user is different")class LeastDifferenceStrategyTest(unittest.TestCase):    def test_least_diff_strategy_returns_most_similar_user(self):        hc = HierarchicalCluster('test1')        root_cluster = hc.root_cluster        least_diff_strategy = s_least_diff(root_cluster, {5618: 5, 1262: 1})        matched_user_id = least_diff_strategy.get_matched_offline_user_id()        self.assertEqual(matched_user_id, 459)