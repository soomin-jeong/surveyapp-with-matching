import unittestimport pandas as pdfrom backend.src.strategies.matchmaking.implemented_strategies.random_matchmaking_strategy import Strategy as s_randomfrom backend.src.strategies.matchmaking.implemented_strategies.least_diff_matching_strategy import \    Strategy as s_least_diff, deduct_by_online_user_ratingsfrom backend.src.strategies.preprocessing.hierarchical_clustering import UserCluster, HierarchicalClusterclass RandomMatchingStrategyTest(unittest.TestCase):    def test_random_strategy_returns_existing_user(self):        dummy_cluster = UserCluster(is_root=True)        dummy_cluster.user_ids = [1, 3, 5]        dummy_cluster.user_cnt = 3        random_matching_strategy = s_random(dummy_cluster, {}, [1])        matched_user_id = random_matching_strategy.get_matched_offline_user_id()        # though it's random, this test expects the same result because its seed is given        self.assertEqual(matched_user_id, 5, "The ID of the matched user is different")class LeastDifferenceStrategyTest(unittest.TestCase):    def test_squared_diff_updates_correctly(self):        # userA, userB, userC rates item 1, item 2        # initial column 'squared diff' is set to be 25        dummy_ratings_matrix = pd.DataFrame({1: [1, 3, 4],                                             2: [5, 4, 3],                                             'squared_diff': [0, 0, 0]},                                            index=['userA', 'userB', 'userC'])        # deducting function should update the column 'squared_diff' into [(3-1)^2, (3-3)^2, (3-4)^2]        deducted_result = deduct_by_online_user_ratings(dummy_ratings_matrix, [1])        expected_result = pd.DataFrame({1: [1, 3, 4],                                        2: [5, 4, 3],                                        'squared_diff': [16, 4, 1]},                                       index=['userA', 'userB', 'userC'])        self.assertTrue(deducted_result.equals(expected_result),                        f"Expected Squared Error: {expected_result} / Actual Squared Error: {deducted_result}")    def test_least_diff_strategy_returns_most_similar_user(self):        hc = HierarchicalCluster('test1')        root_cluster = hc.root_cluster        ratings_by_online_user = "[5618, 1262]"        least_diff_strategy = s_least_diff(root_cluster, hc.rating_matrix, ratings_by_online_user)        matched_user_id = least_diff_strategy.get_matched_offline_user_id()        # due to random choice, it could be either of them        self.assertIn(matched_user_id, [477, 459])